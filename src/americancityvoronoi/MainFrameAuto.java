/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package americancityvoronoi;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.nio.charset.StandardCharsets;
import math.IntVector2;


/**
 *
 * @author rollersimmer
 */
public class MainFrameAuto extends javax.swing.JFrame {
    
    /**
     * the list of cities
     */
    CityList cities;
    public PrintStream outputStream;
    ByteArrayOutputStream baos;
    public String outputBuffer;

/**
     * Creates new form AmericanCityVoronoiFrame
     */
    public MainFrameAuto() {
        baos = new ByteArrayOutputStream();
        outputStream=new PrintStream(baos);
        outputBuffer = new String(baos.toByteArray(), StandardCharsets.UTF_8);
        System.setOut(outputStream);
        System.out.print("System output is now redirected.\n");
        initCityList();
        initComponents();        
        shouldUseReachCheckBox.setSelected(CityVoronoiComparer.SHOULD_REACH_PLAY_A_FACTOR);
        shouldUseTaxicabDistCheckBox.setSelected(IntVector2.IS_DEFAULT_DIST_TAXI);
        shouldUseDiagonalsCheckBox.setSelected(Drawer.SHOULD_SHOW_NEIGHBOR_CONNECTIONS);
        shouldUseDiagonalsCheckBox.setSelected(CityNeighborList.SHOULD_USE_DIAGONAL_DIRECTIONS);
        shouldShowConnectionsCheckBox.setSelected(Drawer.SHOULD_SHOW_NEIGHBOR_CONNECTIONS);
        minPopSpinner.setValue(new Integer(NorthAmericanCityListFactory.MIN_POP_THRESHOLD*100000));
        maxPopSpinner.setValue(new Integer(NorthAmericanCityListFactory.MAX_POP_THRESHOLD*100000));
        
//        initDrawer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        textAreaScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        drawerScrollPane = new javax.swing.JScrollPane();
        drawer = new americancityvoronoi.Drawer();
        drawButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        minPopSpinner = new javax.swing.JSpinner();
        shouldUseReachCheckBox = new javax.swing.JCheckBox();
        shouldUseTaxicabDistCheckBox = new javax.swing.JCheckBox();
        shouldUseDiagonalsCheckBox = new javax.swing.JCheckBox();
        gridSizeSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxNeighborDistanceSpinner = new javax.swing.JSpinner();
        shouldShowConnectionsCheckBox = new javax.swing.JCheckBox();
        clearConsoleButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        maxPopSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("American City Voronoi");

        saveButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        saveButton.setText("Save Image");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        textArea.setRows(5);
        textAreaScrollPane.setViewportView(textArea);

        drawerScrollPane.setAutoscrolls(true);

        drawer.setFont(new java.awt.Font("Dialog", 3, 10)); // NOI18N
        drawerScrollPane.setViewportView(drawer);

        drawButton.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        drawButton.setText("Draw");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel1.setText("Min Pop:");

        minPopSpinner.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        minPopSpinner.setModel(new javax.swing.SpinnerNumberModel(500000, 100000, 20000000, 100000));
        minPopSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(minPopSpinner, ""));
        minPopSpinner.setFocusable(false);
        minPopSpinner.setOpaque(false);
        minPopSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minPopSpinnerStateChanged(evt);
            }
        });

        shouldUseReachCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        shouldUseReachCheckBox.setText("Use Reach?");
        shouldUseReachCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        shouldUseReachCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shouldUseReachCheckBoxActionPerformed(evt);
            }
        });

        shouldUseTaxicabDistCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        shouldUseTaxicabDistCheckBox.setText("Use Taxicab Distance?");
        shouldUseTaxicabDistCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        shouldUseTaxicabDistCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shouldUseTaxicabDistCheckBoxActionPerformed(evt);
            }
        });

        shouldUseDiagonalsCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        shouldUseDiagonalsCheckBox.setText("Use Diagonal Neighbors?");
        shouldUseDiagonalsCheckBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        gridSizeSpinner.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        gridSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(100, 10, 300, 5));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel2.setText("Search Tile Size:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel3.setText("Max Search Dist.");

        maxNeighborDistanceSpinner.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        maxNeighborDistanceSpinner.setModel(new javax.swing.SpinnerNumberModel(7, 1, 25, 1));

        shouldShowConnectionsCheckBox.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        shouldShowConnectionsCheckBox.setText("Show Connections?");
        shouldShowConnectionsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shouldShowConnectionsCheckBoxActionPerformed(evt);
            }
        });

        clearConsoleButton.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        clearConsoleButton.setText("Clear Console");
        clearConsoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearConsoleButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel4.setText("Max Pop:");

        maxPopSpinner.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        maxPopSpinner.setModel(new javax.swing.SpinnerNumberModel(500000, 100000, null, 100000));
        maxPopSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(maxPopSpinner, ""));
        maxPopSpinner.setFocusable(false);
        maxPopSpinner.setOpaque(false);
        maxPopSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxPopSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(drawerScrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(drawButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearConsoleButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(minPopSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addGap(3, 3, 3)
                        .addComponent(maxPopSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shouldUseReachCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shouldUseTaxicabDistCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shouldUseDiagonalsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shouldShowConnectionsCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gridSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxNeighborDistanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(maxPopSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(minPopSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(shouldUseReachCheckBox)
                        .addComponent(shouldUseTaxicabDistCheckBox)
                        .addComponent(shouldUseDiagonalsCheckBox)
                        .addComponent(gridSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(maxNeighborDistanceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(shouldShowConnectionsCheckBox)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textAreaScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
                    .addComponent(drawerScrollPane))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(drawButton)
                    .addComponent(clearConsoleButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        drawer.saveImage();
        outputBuffer = new String(baos.toByteArray(), StandardCharsets.UTF_8);
        textArea.setText(outputBuffer);

    }//GEN-LAST:event_saveButtonActionPerformed

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        // TODO add your handling code here:
        initCityList();
        initDrawer();
        drawer.updatePaint();
        outputBuffer = new String(baos.toByteArray(), StandardCharsets.UTF_8);
        textArea.setText(outputBuffer);
        
    }//GEN-LAST:event_drawButtonActionPerformed

    private void minPopSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minPopSpinnerStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_minPopSpinnerStateChanged

    private void shouldUseReachCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shouldUseReachCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shouldUseReachCheckBoxActionPerformed

    private void shouldUseTaxicabDistCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shouldUseTaxicabDistCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shouldUseTaxicabDistCheckBoxActionPerformed

    private void shouldShowConnectionsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shouldShowConnectionsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shouldShowConnectionsCheckBoxActionPerformed

    private void clearConsoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearConsoleButtonActionPerformed
        // TODO add your handling code here:
        for(int i=0;i<50;i++){
            System.out.println();
        }
    }//GEN-LAST:event_clearConsoleButtonActionPerformed

    private void maxPopSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxPopSpinnerStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_maxPopSpinnerStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrameAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrameAuto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearConsoleButton;
    private javax.swing.JButton drawButton;
    private americancityvoronoi.Drawer drawer;
    private javax.swing.JScrollPane drawerScrollPane;
    private javax.swing.JSpinner gridSizeSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSpinner maxNeighborDistanceSpinner;
    private javax.swing.JSpinner maxPopSpinner;
    private javax.swing.JSpinner minPopSpinner;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox shouldShowConnectionsCheckBox;
    private javax.swing.JCheckBox shouldUseDiagonalsCheckBox;
    private javax.swing.JCheckBox shouldUseReachCheckBox;
    private javax.swing.JCheckBox shouldUseTaxicabDistCheckBox;
    private javax.swing.JTextArea textArea;
    private javax.swing.JScrollPane textAreaScrollPane;
    // End of variables declaration//GEN-END:variables

    private void updateMinMaxPopThresholdFromSpinner() {
        if(minPopSpinner==null) 
            return;
        Object spinnerVal=this.minPopSpinner.getValue();
        String minPopString=spinnerVal.toString();
        int minPop=Integer.parseInt(minPopString);
        NorthAmericanCityListFactory.MIN_POP_THRESHOLD=minPop/100000;
        spinnerVal=this.maxPopSpinner.getValue();
        String maxPopString=spinnerVal.toString();
        int maxPop=Integer.parseInt(maxPopString);
        NorthAmericanCityListFactory.MAX_POP_THRESHOLD=maxPop/100000;
    }

    private void initCityList() {        
        updateMinMaxPopThresholdFromSpinner();
        cities=LocationLoader.createFromFile("data/locations.dat");
//        cities=NorthAmericanCityListFactory.create();
        cities.print();
    }

    private void initDrawer() {
        CityMap.TILE_SIZE=Integer.parseInt(gridSizeSpinner.getValue().toString());
        Drawer.SHOULD_SHOW_NEIGHBOR_CONNECTIONS=shouldShowConnectionsCheckBox.isSelected();
        CityNeighborList.SHOULD_USE_DIAGONAL_DIRECTIONS=shouldUseDiagonalsCheckBox.isSelected();
        CityNeighborList.MAX_NEIGHBOR_DIST=Integer.parseInt(maxNeighborDistanceSpinner.getValue().toString());
        IntVector2.IS_DEFAULT_DIST_TAXI=shouldUseTaxicabDistCheckBox.isSelected();
        CityVoronoiComparer.SHOULD_REACH_PLAY_A_FACTOR=shouldUseReachCheckBox.isSelected();
        this.drawer.init(cities);
    }

}
